\
\ 	register definitions for STM32F401 
\
\		Ralph Sahli, 2017
\		

16000000 variable hclk	\ system clock: initial 16 MHz from HSI RC

: registers ( -- )
	0 ;				\ offset start

: reg 
    <builds 		( offset -- newoffset )
		dup , cell+	
    does>			( structure-base -- structure-member-address )  
		@ + ;

: regC
    <builds 		( offset -- newoffset )
		dup , cell+	
    does>			( structure-base stream -- structure-member-address )  
		@ swap $18 * + + ;

: end-registers ( -- )
	drop ;			\ last offset

\ bit masks
: bit ( n -- n )
	1 swap lshift 1-foldable ;

$E000E100 constant NVIC
$40023C00 constant FLASH_ACR 				\ Flash Access Control Register
$40013800 constant SYSCFG	

$40013C00 constant EXTI
	registers
		reg _eIMR
		reg _eEMR
		reg _eRTSR
		reg _eFTSR
		reg _eSWIER
		reg _ePR
	end-registers
	
$40002800 constant RTC
	registers
		reg _cTR
		reg _cDR
		reg _cCR
		reg _cISR
		reg _cPRER
		drop $24
		reg _cWPR
	end-registers

	
$40023800 constant RCC
	registers
		reg _rCR			\ Clock control register
		reg _rPLLCFGR		\ PLL configuration register
		reg _rCFGR			\ Clock configuration register
		drop $30
		reg _rAHB1ENR		\ AHB1 peripheral clock enable register
		reg _rAHB2ENR		\ AHB3 peripheral clock enable register
		drop $40
		reg _rAPB1ENR		\ APB1 peripheral clock enable register
		reg _rAPB2ENR		\ APB2 peripheral clock enable register
		drop $70
		reg _rBDCR			\ RCC Backup domain control register
		reg _rCSR			\ Control/status register
	end-registers

$40026000 constant DMA1
$40026400 constant DMA2
	registers
		reg _dLISR		\ interrupt status register low
		reg _dHISR		\ interrupt status register high
		reg _dLIFCR		\ interrupt flag clear register low
		reg _dHIFCR		\ interrupt flag clear register high
		regC _dSxCR		\ stream x configuration register
		regC _dSxNDTR	\ stream x number of data register
		regC _dSxPAR	\ stream x peripheral address register
		regC _dSxM0AR	\ stream x memory 0 address register
		regC _dSxM1AR	\ stream x memory 1 address register
		regC _dSxFCR	\ stream x FIFO control register
	end-registers

$40020400 constant PORTB
$40020000 constant PORTA
	registers
		reg _pMODER   	\ Port Mode Register - 00=Input  01=Output  10=Alternate  11=Analog
		reg _pOTYPER  	\ Port Output type register - (0) Push/Pull vs. (1) Open Drain
		reg _pOSPEEDR 	\ Output Speed Register - 00=2 MHz  01=25 MHz  10=50 MHz  11=100 MHz
		reg _pPUPDR		\ Pullup / Pulldown - 00=none  01=Pullup  10=Pulldown
		reg _pIDR		\ Input Data Register
		reg _pODR     	\ Output Data Register
		reg _pBSRR		\ port bit set/reset register
		reg _pLCKR		\ port configuration lock register		
		reg _pAFRL		\ Alternate function  low register
		reg _pAFRH		\ Alternate function high register
	end-registers

$40003C00 constant SPI3					\ SPI 3 register map
$40003800 constant SPI2					\ SPI 2 register map
	registers
		reg _sCR1		\ SPI control register
		reg _sCR2		\ SPI control register 2
		reg _sSR		\ SPI status register
		reg _sDR		\ SPI data register
	end-registers

$40005C00 constant I2C3
$40005800 constant I2C2
$40005400 constant I2C1
	registers
		reg _iCR1		\ control register 1
		reg _iCR2		\ control register 2
		reg _iOAR1		\ Own address 1 register
		reg _iOAR2		\ Own address 2 register
		reg _iDR		\ Data register
		reg _iSR1		\ Status register 1
		reg _iSR2		\ Status register 2
		reg _iCCR		\ Clock control register
		reg _iTRISE	 	\ TRISE register
	end-registers

	
$40011000 constant USART1	
$40004400 constant USART2
	registers
		reg _uSR 		\ Status register
		reg _uDR		\ Data register
		reg _uBRR 		\ Baud rate register
		reg _uCR1		\ Control register 1
		reg _uCR2		\ Control register 2
		reg _uCR3		\ Control register 3
	end-registers

	
$40014800 constant TIM11
$40014400 constant TIM10
$40014000 constant TIM9
$40000C00 constant TIM5
$40000800 constant TIM4
$40000400 constant TIM3
$40000000 constant TIM2
	registers
		reg _tCR1		\ TIMx control register 1
		reg _tCR2		\ TIMx control register 2
		reg _tSMCR		\ TIMx slave mode control register
		reg _tDIER		\ TIMx DMA/Interrupt enable register
		reg _tSR		\ TIMx status register
		reg _tEGR		\ TIMx event generation register
		reg _tCCMR1		\ TIMx capture/compare mode register 1
		reg _tCCMR2		\ TIMx capture/compare mode register 2
		reg _tCCER		\ TIMx capture/compare enable register
		reg _tCNT		\ TIMx counter
		reg _tPSC		\ TIMx prescaler
		reg _tARR		\ TIMx auto-reload register
		reg _tRCR		\ TIM16/TIM17 repetition counter register
		reg _tCCR1		\ TIMx capture/compare register 1
		reg _tCCR2		\ TIMx capture/compare register 2
		reg _tCCR3		\ TIMx capture/compare register 3
		reg _tCCR4		\ TIMx capture/compare register 4
		reg _tBDTR		\ TIM16/TIM17 break and dead-time register
		reg _tDCR		\ TIMx DMA control register
		reg _tDMAR		\ TIMx DMA address for full transfer
	end-registers

\ Port Mode Register - 00=Input  01=Output  10=Alternate  11=Analog
%00 constant MODE_Input  
%01 constant MODE_Output  
%10 constant MODE_Alternate  
%11 constant MODE_Analog
: set-moder ( mode pin# baseAddr -- )
	>R 2* %11 over lshift r@ _pMODER bic! 	\ clear ..
	lshift R> _pMODER bis!					\ .. set
;

\ Port Output Speed Register - 00=2 MHz  01=25 MHz  10=50 MHz  11=100 MHz
%00 constant SPEED_LOW 
%01 constant SPEED_MEDIUM
%10 constant SPEED_HIGH
%11 constant SPEED_VERYHIGH
: set-opspeed ( speed pin# baseAddr -- )
	>R 2* %11 over lshift r@ _pOSPEEDR bic!	\ clear ..
	lshift R> _pOSPEEDR bis!				\ .. set
;

\ Port alternate function
: set-alternate ( af# pin# baseAddr -- )
	>R dup 8 < if 
		4 * lshift R> _pAFRL
	else 
		8 - 4 * lshift R> _pAFRH 
	then
	bis!
;

\ Enable IRQn 0..80
: NVIC_EnableIRQ ( n -- )
	32 /mod NVIC + bis! ;

\ Disable IRQn 0..80
: NVIC_DisableIRQ ( n -- )
	32 /mod $80 + NVIC + bis! ;

\ Set priority for IRQn 0..80, priority 0..255	
: NVIC_SetPriority ( prio n -- )
	4 /mod cells $300 + NVIC + 	\ register offset
	-rot 8 * lshift				\ byte offset, register value
	swap bis! ;
	
\ set external interrupt configuration, port 0..7 (A..H), pin 0..15  
: SYSCFG_SetEXTI ( port pin -- )
	0 bit RCC _rAPB2ENR bis!	\ enable syscfg clock
	4 /mod cells SYSCFG + 8 +	\ register offset
	-rot 4 * lshift				\ 4-bit offset, register value
	swap bis! ;

\ calculate baudrate
: baud ( n -- reg-val )
	hclk @ over 16 * /mod swap
	rot 10 /  / 10 /mod swap				\ round
	5 >= if 1+ then							\ ...
	dup 16 < if
		swap 4 lshift or
	else
		drop 1+ 4 lshift
	then
;	


	